{"ast":null,"code":"import _slicedToArray from \"/home/timus/Desktop/reactsongsingerapi/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/timus/Desktop/reactsongsingerapi/src/components/AddSong.js\";\nimport React, { useState, useRef } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getSingers, addingSong, getSongs } from '../queries/queries';\n\nconst AddSong = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        genre = _useState4[0],\n        setGenre = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        singerid = _useState6[0],\n        setSingerid = _useState6[1];\n\n  let input = useRef();\n\n  function displaySingers() {\n    const data = props.getSingers;\n    if (data.loading) return React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Loading...\");else return data.singers.map(singer => React.createElement(\"option\", {\n      key: singer.id,\n      value: singer.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, singer.name));\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.addingSong({\n      variables: {\n        name,\n        genre,\n        authorid: singerid\n      },\n      refetchQueries: [{\n        query: getSongs\n      }]\n    });\n    input.current.value = '';\n  }\n\n  return React.createElement(\"form\", {\n    id: \"addsong\",\n    className: \"w3-padding w3-round w3-border w3-border-white w3-margin\",\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \" T\\xEAn b\\xE0i h\\xE1t:\", React.createElement(\"input\", {\n    ref: input,\n    type: \"text\",\n    required: true,\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Th\\u1EC3 lo\\u1EA1i:\", React.createElement(\"input\", {\n    ref: input,\n    type: \"text\",\n    required: true,\n    onChange: e => setGenre(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Ca s\\u0129\", React.createElement(\"select\", {\n    required: true,\n    onChange: e => setSingerid(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Ch\\u1ECDn ca s\\u0129\"), displaySingers())), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"+\"));\n};\n\nexport default compose(graphql(getSingers, {\n  name: 'getSingers'\n}), graphql(addingSong, {\n  name: 'addingSong'\n}))(AddSong);","map":{"version":3,"sources":["/home/timus/Desktop/reactsongsingerapi/src/components/AddSong.js"],"names":["React","useState","useRef","graphql","compose","getSingers","addingSong","getSongs","AddSong","props","name","setName","genre","setGenre","singerid","setSingerid","input","displaySingers","data","loading","singers","map","singer","id","handleSubmit","e","preventDefault","variables","authorid","refetchQueries","query","current","value","target"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,MAAzB,QAAsC,OAAtC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,QAAjC,QAAiD,oBAAjD;;AACA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAAA,oBACAR,QAAQ,CAAC,EAAD,CADR;AAAA;AAAA,QACjBS,IADiB;AAAA,QACXC,OADW;;AAAA,qBAEEV,QAAQ,CAAC,EAAD,CAFV;AAAA;AAAA,QAEjBW,KAFiB;AAAA,QAEVC,QAFU;;AAAA,qBAGQZ,QAAQ,CAAC,EAAD,CAHhB;AAAA;AAAA,QAGjBa,QAHiB;AAAA,QAGPC,WAHO;;AAIxB,MAAIC,KAAK,GAAGd,MAAM,EAAlB;;AACA,WAASe,cAAT,GAA0B;AACzB,UAAMC,IAAI,GAAGT,KAAK,CAACJ,UAAnB;AACA,QAAGa,IAAI,CAACC,OAAR,EACC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP,CADD,KAEK,OAAOD,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAiBC,MAAM,IAAI;AAAQ,MAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAwB,MAAA,KAAK,EAAED,MAAM,CAACC,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2CD,MAAM,CAACZ,IAAlD,CAA3B,CAAP;AACL;;AACD,WAASc,YAAT,CAAsBC,CAAtB,EAAyB;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACAjB,IAAAA,KAAK,CAACH,UAAN,CAAiB;AAChBqB,MAAAA,SAAS,EAAE;AACVjB,QAAAA,IADU;AAEVE,QAAAA,KAFU;AAGVgB,QAAAA,QAAQ,EAAEd;AAHA,OADK;AAMhBe,MAAAA,cAAc,EAAE,CAAC;AAACC,QAAAA,KAAK,EAAEvB;AAAR,OAAD;AANA,KAAjB;AAQAS,IAAAA,KAAK,CAACe,OAAN,CAAcC,KAAd,GAAsB,EAAtB;AACA;;AACD,SACC;AAAM,IAAA,EAAE,EAAC,SAAT;AAAmB,IAAA,SAAS,EAAC,yDAA7B;AAAuF,IAAA,QAAQ,EAAEP,CAAC,IAAID,YAAY,CAACC,CAAD,CAAlH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACC;AAAO,IAAA,GAAG,EAAET,KAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,QAAQ,MAAvC;AAAwC,IAAA,QAAQ,EAAES,CAAC,IAAId,OAAO,CAACc,CAAC,CAACQ,MAAF,CAASD,KAAV,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADD,EAGS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHT,EAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEC;AAAO,IAAA,GAAG,EAAEhB,KAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,QAAQ,MAAvC;AAAwC,IAAA,QAAQ,EAAES,CAAC,IAAIZ,QAAQ,CAACY,CAAC,CAACQ,MAAF,CAASD,KAAV,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CAJD,EAOS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPT,EAQC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC;AAAQ,IAAA,QAAQ,MAAhB;AAAiB,IAAA,QAAQ,EAAEP,CAAC,IAAIV,WAAW,CAACU,CAAC,CAACQ,MAAF,CAASD,KAAV,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADD,EAEEf,cAAc,EAFhB,CAFD,CARD,EAeC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAfD,CADD;AAmBA,CA1CD;;AA4CA,eAAeb,OAAO,CACrBD,OAAO,CAACE,UAAD,EAAa;AAACK,EAAAA,IAAI,EAAE;AAAP,CAAb,CADc,EAErBP,OAAO,CAACG,UAAD,EAAa;AAACI,EAAAA,IAAI,EAAE;AAAP,CAAb,CAFc,CAAP,CAGbF,OAHa,CAAf","sourcesContent":["import React, {useState, useRef} from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getSingers, addingSong, getSongs } from '../queries/queries';\nconst AddSong = props => {\n\tconst [name, setName] = useState('');\n\tconst [genre, setGenre] = useState('');\n\tconst [singerid, setSingerid] = useState('');\n\tlet input = useRef();\n\tfunction displaySingers() {\n\t\tconst data = props.getSingers;\n\t\tif(data.loading)\n\t\t\treturn <option>Loading...</option>\n\t\telse return data.singers.map(singer => <option key={singer.id} value={singer.id}>{singer.name}</option>)\n\t}\n\tfunction handleSubmit(e) {\n\t\te.preventDefault();\n\t\tprops.addingSong({\n\t\t\tvariables: {\n\t\t\t\tname,\n\t\t\t\tgenre,\n\t\t\t\tauthorid: singerid\n\t\t\t},\n\t\t\trefetchQueries: [{query: getSongs}]\n\t\t});\n\t\tinput.current.value = '';\n\t}\n\treturn(\n\t\t<form id=\"addsong\" className=\"w3-padding w3-round w3-border w3-border-white w3-margin\" onSubmit={e => handleSubmit(e)}>\n\t\t\t<label>\tTên bài hát:\n\t\t\t\t<input ref={input} type=\"text\" required onChange={e => setName(e.target.value)}/>\n\t\t\t</label><br/>\n\t\t\t<label>\n\t\t\t\tThể loại:\n\t\t\t\t<input ref={input} type=\"text\" required onChange={e => setGenre(e.target.value)}/>\n\t\t\t</label><br/>\n\t\t\t<label>\n\t\t\t\tCa sĩ\n\t\t\t\t<select required onChange={e => setSingerid(e.target.value)}>\n\t\t\t\t\t<option value=\"\">Chọn ca sĩ</option>\n\t\t\t\t\t{displaySingers()}\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t\t<button>+</button>\n\t\t</form>\n\t)\n}\n\nexport default compose(\n\tgraphql(getSingers, {name: 'getSingers'}),\n\tgraphql(addingSong, {name: 'addingSong'})\n)(AddSong)\n"]},"metadata":{},"sourceType":"module"}