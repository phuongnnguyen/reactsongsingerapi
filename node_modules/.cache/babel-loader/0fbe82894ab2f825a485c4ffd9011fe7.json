{"ast":null,"code":"import _slicedToArray from \"/home/timus/Desktop/graphql-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/timus/Desktop/graphql-app/client/src/components/AddSong.js\";\nimport React, { useState } from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getSingers } from '../queries/queries';\n\nconst AddSong = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        genre = _useState4[0],\n        setGenre = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        singerid = _useState6[0],\n        setSingerid = _useState6[1];\n\n  function displaySingers() {\n    const data = props.data;\n    console.log(name, genre, singerid);\n    if (data.loading) return React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12\n      },\n      __self: this\n    }, \"Loading...\");else return data.singers.map(singer => React.createElement(\"option\", {\n      key: singer.id,\n      value: singer.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, singer.name));\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n  }\n\n  return React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"T\\xEAn b\\xE0i h\\xE1t:\", React.createElement(\"input\", {\n    type: \"text\",\n    required: true,\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Th\\u1EC3 lo\\u1EA1i:\", React.createElement(\"input\", {\n    type: \"text\",\n    required: true,\n    onChange: e => setGenre(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Ca s\\u0129\", React.createElement(\"select\", {\n    onChange: e => setName(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Ch\\u1ECDn ca s\\u0129\"), displaySingers())), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"+\"));\n};\n\nexport default graphql(getSingers)(AddSong);","map":{"version":3,"sources":["/home/timus/Desktop/graphql-app/client/src/components/AddSong.js"],"names":["React","useState","graphql","compose","getSingers","AddSong","props","name","setName","genre","setGenre","singerid","setSingerid","displaySingers","data","console","log","loading","singers","map","singer","id","handleSubmit","e","preventDefault","target","value"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,cAAjC;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AACA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AAAA,oBACAL,QAAQ,CAAC,EAAD,CADR;AAAA;AAAA,QACjBM,IADiB;AAAA,QACXC,OADW;;AAAA,qBAEEP,QAAQ,CAAC,EAAD,CAFV;AAAA;AAAA,QAEjBQ,KAFiB;AAAA,QAEVC,QAFU;;AAAA,qBAGQT,QAAQ,CAAC,EAAD,CAHhB;AAAA;AAAA,QAGjBU,QAHiB;AAAA,QAGPC,WAHO;;AAIxB,WAASC,cAAT,GAA0B;AACzB,UAAMC,IAAI,GAAGR,KAAK,CAACQ,IAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ,EAAkBE,KAAlB,EAAyBE,QAAzB;AACA,QAAGG,IAAI,CAACG,OAAR,EACC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP,CADD,KAEK,OAAOH,IAAI,CAACI,OAAL,CAAaC,GAAb,CAAiBC,MAAM,IAAI;AAAQ,MAAA,GAAG,EAAEA,MAAM,CAACC,EAApB;AAAwB,MAAA,KAAK,EAAED,MAAM,CAACC,EAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2CD,MAAM,CAACb,IAAlD,CAA3B,CAAP;AACL;;AACD,WAASe,YAAT,CAAsBC,CAAtB,EAAyB;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA;;AACD,SACC;AAAM,IAAA,QAAQ,EAAED,CAAC,IAAID,YAAY,CAACC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEC;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,MAA3B;AAA4B,IAAA,QAAQ,EAAEA,CAAC,IAAIf,OAAO,CAACe,CAAC,CAACE,MAAF,CAASC,KAAV,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CADD,EAIS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJT,EAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEC;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,MAA3B;AAA4B,IAAA,QAAQ,EAAEH,CAAC,IAAIb,QAAQ,CAACa,CAAC,CAACE,MAAF,CAASC,KAAV,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CALD,EAQS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IART,EASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC;AAAQ,IAAA,QAAQ,EAAEH,CAAC,IAAIf,OAAO,CAACe,CAAC,CAACE,MAAF,CAASC,KAAV,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADD,EAEEb,cAAc,EAFhB,CAFD,CATD,EAgBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAhBD,CADD;AAoBA,CAlCD;;AAoCA,eAAeX,OAAO,CAACE,UAAD,CAAP,CAAoBC,OAApB,CAAf","sourcesContent":["import React, {useState} from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getSingers } from '../queries/queries';\nconst AddSong = props => {\n\tconst [name, setName] = useState('');\n\tconst [genre, setGenre] = useState('');\n\tconst [singerid, setSingerid] = useState('');\n\tfunction displaySingers() {\n\t\tconst data = props.data;\n\t\tconsole.log(name, genre, singerid)\n\t\tif(data.loading)\n\t\t\treturn <option>Loading...</option>\n\t\telse return data.singers.map(singer => <option key={singer.id} value={singer.id}>{singer.name}</option>)\n\t}\n\tfunction handleSubmit(e) {\n\t\te.preventDefault();\n\t}\n\treturn(\n\t\t<form onSubmit={e => handleSubmit(e)}>\n\t\t\t<label>\n\t\t\t\tTên bài hát:\n\t\t\t\t<input type=\"text\" required onChange={e => setName(e.target.value)}/>\n\t\t\t</label><br/>\n\t\t\t<label>\n\t\t\t\tThể loại:\n\t\t\t\t<input type=\"text\" required onChange={e => setGenre(e.target.value)}/>\n\t\t\t</label><br/>\n\t\t\t<label>\n\t\t\t\tCa sĩ\n\t\t\t\t<select onChange={e => setName(e.target.value)}>\n\t\t\t\t\t<option>Chọn ca sĩ</option>\n\t\t\t\t\t{displaySingers()}\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t\t<button>+</button>\n\t\t</form>\n\t)\n}\n\nexport default graphql(getSingers)(AddSong)\n"]},"metadata":{},"sourceType":"module"}