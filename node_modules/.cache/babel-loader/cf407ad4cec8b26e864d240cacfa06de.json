{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/timus/Desktop/graphql-app/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n\\tmutation ($name: String!, $genre: String!, $authorid: ID!) {\\n\\t\\taddSong(name: $name, genre: $genre, authorid: $authorid) {\\n\\t\\t\\tname,\\n\\t\\t\\tgenre\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n\\tquery($ID: ID) {\\n\\t\\tsong(id: $ID) {\\n\\t\\t\\tid \\n\\t\\t\\tname \\n\\t\\t\\tgenre \\n\\t\\t\\tsinger { \\n\\t\\t\\t\\tid \\n\\t\\t\\t\\tname \\n\\t\\t\\t\\tage\\n\\t\\t\\t\\tsongs { \\n\\t\\t\\t\\t\\tname \\n\\t\\t\\t\\t\\tid \\n\\t\\t\\t\\t} \\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n\\t{\\n\\t\\tsingers {\\n\\t\\t\\tname,\\n\\t\\t\\tid\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n\\t{\\n\\t\\tsongs {\\n\\t\\t\\tid, \\n\\t\\t\\tname\\t\\n\\t\\t}\\n\\t}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nconst getSongs = gql(_templateObject());\nconst getSingers = gql(_templateObject2());\nconst getAll = gql(_templateObject3());\nconst addingSong = gql(_templateObject4());\nexport { getSongs, getSingers, addingSong, getAll };","map":{"version":3,"sources":["/home/timus/Desktop/graphql-app/client/src/queries/queries.js"],"names":["gql","getSongs","getSingers","getAll","addingSong"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAQA,GAAR,QAAkB,cAAlB;AAEA,MAAMC,QAAQ,GAAGD,GAAH,mBAAd;AAQA,MAAME,UAAU,GAAGF,GAAH,oBAAhB;AAQA,MAAMG,MAAM,GAAGH,GAAH,oBAAZ;AAkBA,MAAMI,UAAU,GAAGJ,GAAH,oBAAhB;AAQA,SAASC,QAAT,EAAmBC,UAAnB,EAA+BE,UAA/B,EAA2CD,MAA3C","sourcesContent":["import {gql} from 'apollo-boost';\n\nconst getSongs = gql`\n\t{\n\t\tsongs {\n\t\t\tid, \n\t\t\tname\t\n\t\t}\n\t}\n`\nconst getSingers = gql`\n\t{\n\t\tsingers {\n\t\t\tname,\n\t\t\tid\n\t\t}\n\t}\n`\nconst getAll = gql`\n\tquery($ID: ID) {\n\t\tsong(id: $ID) {\n\t\t\tid \n\t\t\tname \n\t\t\tgenre \n\t\t\tsinger { \n\t\t\t\tid \n\t\t\t\tname \n\t\t\t\tage\n\t\t\t\tsongs { \n\t\t\t\t\tname \n\t\t\t\t\tid \n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t}\n`\nconst addingSong = gql`\n\tmutation ($name: String!, $genre: String!, $authorid: ID!) {\n\t\taddSong(name: $name, genre: $genre, authorid: $authorid) {\n\t\t\tname,\n\t\t\tgenre\n\t\t}\n\t}\n`\nexport { getSongs, getSingers, addingSong, getAll }\n"]},"metadata":{},"sourceType":"module"}