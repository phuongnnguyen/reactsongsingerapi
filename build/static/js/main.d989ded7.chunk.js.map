{"version":3,"sources":["queries/queries.js","components/AddSong.js","components/AddSinger.js","components/Details.js","components/Songs.js","App.js","serviceWorker.js","index.js"],"names":["getSongs","gql","_templateObject","getSingers","_templateObject2","getSong","_templateObject3","addingSong","_templateObject4","addingSinger","_templateObject5","compose","graphql","name","props","_useState","useState","_useState2","Object","slicedToArray","setName","_useState3","_useState4","genre","setGenre","_useState5","_useState6","singerid","setSingerid","react_default","a","createElement","id","className","onSubmit","e","preventDefault","variables","authorid","refetchQueries","query","handleSubmit","type","required","onChange","target","value","data","loading","singers","map","singer","key","displaySingers","age","setAge","parseInt","options","song","songs","displayBook","setID","onClick","displaySongs","components_AddSong","components_AddSinger","components_Details","client","ApolloClient","uri","App","react_apollo_esm","components_Songs","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d989ded7.chunk.js","sourcesContent":["import {gql} from 'apollo-boost';\n\nconst getSongs = gql`\n\t{\n\t\tsongs {\n\t\t\tid, \n\t\t\tname,\n\t\t}\n\t}\n`\nconst getSingers = gql`\n\t{\n\t\tsingers {\n\t\t\tname,\n\t\t\tid\n\t\t}\n\t}\n`\nconst getSong = gql`\n\tquery($id: ID) {\n\t\tsong(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tgenre\n\t\t\tsinger {\n\t\t\t\tname\n\t\t\t\tage\n\t\t\t\tid\n\t\t\t\tsongs {\n\t\t\t\t\tname\n\t\t\t\t\tgenre\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\nconst addingSong = gql`\n\tmutation ($name: String!, $genre: String!, $authorid: ID!) {\n\t\taddSong(name: $name, genre: $genre, authorid: $authorid) {\n\t\t\tname,\n\t\t\tgenre\n\t\t}\n\t}\n`\nconst addingSinger = gql`\n\tmutation($name: String!, $age: Int!) {\n\t\taddSinger(name: $name, age: $age) {\n\t\t\tname, \n\t\t\tage\n\t\t}\n\t}\n`\n\nexport { getSongs, getSingers, addingSong, addingSinger, getSong }\n","import React, {useState} from 'react';\nimport { graphql, compose } from 'react-apollo';\nimport { getSingers, addingSong, getSongs } from '../queries/queries';\nconst AddSong = props => {\n\tconst [name, setName] = useState('');\n\tconst [genre, setGenre] = useState('');\n\tconst [singerid, setSingerid] = useState('');\n\tfunction displaySingers() {\n\t\tconst data = props.getSingers;\n\t\tif(data.loading)\n\t\t\treturn <option>Loading...</option>\n\t\telse return data.singers.map(singer => <option key={singer.id} value={singer.id}>{singer.name}</option>)\n\t}\n\tfunction handleSubmit(e) {\n\t\te.preventDefault();\n\t\tprops.addingSong({\n\t\t\tvariables: {\n\t\t\t\tname,\n\t\t\t\tgenre,\n\t\t\t\tauthorid: singerid\n\t\t\t},\n\t\t\trefetchQueries: [{query: getSongs}]\n\t\t})\n\t}\n\treturn(\n\t\t<form id=\"addsong\" className=\"w3-padding w3-round w3-border w3-border-white w3-margin\" onSubmit={e => handleSubmit(e)}>\n\t\t\t<label>\tTên bài hát:\n\t\t\t\t<input type=\"text\" required onChange={e => setName(e.target.value)}/>\n\t\t\t</label><br/>\n\t\t\t<label>\n\t\t\t\tThể loại:\n\t\t\t\t<input type=\"text\" required onChange={e => setGenre(e.target.value)}/>\n\t\t\t</label><br/>\n\t\t\t<label>\n\t\t\t\tCa sĩ\n\t\t\t\t<select required onChange={e => setSingerid(e.target.value)}>\n\t\t\t\t\t<option value=\"\">Chọn ca sĩ</option>\n\t\t\t\t\t{displaySingers()}\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t\t<button>+</button>\n\t\t</form>\n\t)\n}\n\nexport default compose(\n\tgraphql(getSingers, {name: 'getSingers'}),\n\tgraphql(addingSong, {name: 'addingSong'})\n)(AddSong)\n","import React, {useState} from 'react'\n\nimport {addingSinger, getSingers} from '../queries/queries';\nimport {graphql, compose} from 'react-apollo';\nconst AddSinger = props => {\n\tconst [name, setName] = useState('');\n\tconst [age, setAge] = useState('');\n\tfunction handleSubmit(e) {\n\t\te.preventDefault();\n\t\tprops.addingSinger({\n\t\t\tvariables: {\n\t\t\t\tname, \n\t\t\t\tage\n\t\t\t},\n\t\t\trefetchQueries: [{query: getSingers}]\n\t\t})\n\t}\n\treturn(\n\t\t<form onSubmit={e => handleSubmit(e)} id=\"addsinger\" className=\"w3-padding w3-round w3-border w3-border-white w3-margin\">\n\t\t\t<label>\n\t\t\t\tTên ca sĩ: {' '}\n\t\t\t\t<input type='text' required onChange={e => setName(e.target.value)}/>\n\t\t\t</label><br/>\n\t\t\t<div>\n\t\t\t\tTuổi: {' '}\n\t\t\t</div>\n\t\t\t<input type='number' required onChange={e => setAge(parseInt(e.target.value))}/>\n\t\t\t<button>+</button>\n\t\t</form>\n\t)\n}\n\nexport default compose(\n\tgraphql(addingSinger, {name: \"addingSinger\"})\n)(AddSinger)\n","import React from 'react';\nimport { graphql } from 'react-apollo';\nimport { getSong } from '../queries/queries'\nconst Details = props => {\n\tfunction displayBook() {\n\t\tconst {song} = props.data;\n\t\tif(song) {\n\t\t\treturn(\n\t\t\t\t<div className=\"w3-bar-block detail\">\n\t\t\t\t\t<h2 className=\"w3-bar-item\">Tên bài hát: {song.name}</h2>\n\t\t\t\t\t<h3 className=\"w3-bar-item\">Thể loại: {song.genre}</h3>\n\t\t\t\t\t<p className=\"w3-bar-item\">Tên ca sĩ: {song.singer.name}</p>\n\t\t\t\t\t<p className=\"w3-bar-item\">Tuổi: {song.singer.age}</p>\n\t\t\t\t\t<p className=\"w3-bar-item\">Bài hát: </p>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{song.singer.songs.map(song => <li key={song.name}>{song.name}</li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t)\n\t\t} \n\t}\n\treturn(\n\t\t<div>\n\t\t\t{displayBook()}\n\t\t</div>\n\t)\n}\n\nexport default graphql(getSong, {\n\toptions: (props) => {\n\t\treturn {\n\t\t\tvariables: {\n\t\t\t\tid: props.id\n\t\t\t}\n\t\t}\n\t}\n}\n)(Details)\n","import React, { useState } from 'react'\nimport { getSongs } from '../queries/queries';\nimport { graphql, compose } from 'react-apollo';\nimport AddSong from './AddSong';\nimport AddSinger from './AddSinger';\nimport Details from './Details';\n\nconst Songs = props => {\n\tconst [id, setID] = useState('');\n\tfunction displaySongs() {\n\t\tconst data = props.getSongs;\n\t\tif(data.loading)\n\t\t\treturn <div>Loading....</div>\n\t\telse\n\t\t\treturn data.songs.map(song => <li className=\"w3-bar-item w3-btn w3-round w3-padding w3-card-4 w3-margin w3-white\" onClick={e => setID(song.id)} key={song.id}>{song.name}</li>)\n\t};\n\treturn(\n\t<div className=\"SongsArea w3-row\">\n\t\t<div className=\"w3-half\">\n\t\t\t<h2>Song List</h2>\n\t\t\t<ul className=\"w3-bar\">\n\t\t\t\t{displaySongs()}\n\t\t\t</ul>\n\t\t\t<AddSong/>\n\t\t\t<AddSinger/>\n\t\t</div>\n\t\t<div className=\"w3-half\">\n\t\t\t<Details id={id}/>\t\n\t\t</div>\n\t</div>\n\t)\n}\n\nexport default compose(\n graphql(getSongs, {name: 'getSongs'}),\n)(Songs)\n","import React from 'react';\nimport Songs from './components/Songs';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\nimport './w3.css';\nimport './App.css';\nconst client = new ApolloClient({\n\turi: \"https://songsingerapi.herokuapp.com/graphql/\"\n});\n\nfunction App() {\n  return (\n\t<ApolloProvider client={client}>\n    \t<div className=\"App w3-teal\">\n\t  \t\t<h2 className=\"w3-center\">Song & Singer API</h2>\n\t  \t\t<Songs/>\n    \t</div>\n\t</ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}